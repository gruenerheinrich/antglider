package org.centauron.ant.antrunner;

import java.io.File;
import java.util.Vector;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.tools.ant.util.FileUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class AntRunnerBatchParser {
	private AntRunner m_runner;
	public AntRunnerBatchParser(AntRunner ar) {
		m_runner=ar;
	}
	
	public Vector<AntRunnerNode> getNodesFromFile(File f,Object notifierObj) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document doc = builder.parse(f.getAbsoluteFile());
		NodeList antrunnernodes=	doc.getElementsByTagName("ant");
		Vector<AntRunnerNode> ll=new Vector();
		for (int i=0;i<antrunnernodes.getLength();i++) {
			Element ant=(Element)antrunnernodes.item(i);
			AntRunnerNode ar=this.getNodeFromAnt(ant, notifierObj);
			ll.add(ar);
		}
		return ll;
	}
	
	public void saveNodesToFile(File f,Vector<AntRunnerNode> v) throws Exception {
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
 
		// root elements
		Document doc = docBuilder.newDocument();
		Element rootElement = doc.createElement("project");
		rootElement.setAttribute("name", f.getName());
		rootElement.setAttribute("default", "Batch");
		//rootElement.setAttribute("description", "Batch File generated by AntRunner");
		doc.appendChild(rootElement);
		Element target =doc.createElement("target");
		target.setAttribute("name","Batch");
		
		for (AntRunnerNode ar:v) {
			Element an=this.getAntFromNode(doc,ar);
			target.appendChild(an);
		}
		rootElement.appendChild(target);
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		transformerFactory.setAttribute("indent-number", new Integer(2));
		Transformer transformer = transformerFactory.newTransformer();
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(f);
		
		transformer.transform(source, result);
		
		
	}
	
	public Element getAntFromNode(Document doc,AntRunnerNode ar) {
		Element ant=doc.createElement("ant");
		//PATH RELATIVE
		ant.setAttribute("antfile", ar.getBuildFile().getPath());
		ant.setAttribute("target", ar.getTargetName());

		return ant;
	}
	public AntRunnerNode getNodeFromAnt(Element ant,Object notifierObj) {
		String name=ant.getAttribute("target");
		AntRunnerNode ar=new AntRunnerNode(m_runner,notifierObj,name,AntRunnerNode.MODE_BATCHTARGET);
		ar.setBuildFile(new File(ant.getAttribute("antfile")));
		ar.setTargetName(name);
		return ar;
	}
}
